local Producer N Limit Out OddFilter P L F T Consumer Xs Ys Accumulator NotEqual in
  Producer = proc {$ N Limit Out}
    if (N<Limit) then T N1 in
      Out = (N|T)
      N1 = (N + 1)
      {Producer N1 Limit T}
    else Out = nil
    end
  end

/*
OddNum = fun {$ P Out}
   thread Ys = { filter Xs (fun {$ X} X mod 2\=0 end)} end

end*/


 OddFilter = fun {$ P Out}
    case P
       of nil then Out
       [] '|'(1:X 2:Xr) then in
         if((X mod 2) == 0) then
          skip Browse X
           Out = (Out|X)
           skip Browse Out
         else
            skip Basic
            //{OddFilter Xr Out}
        end
        {OddFilter Xr Out}
    end
  end


 Consumer = fun {$ Xs Accumulator}
     case Xs
      of nil then Accumulator
      [] '|'(1:X 2:Xr) then {Consumer Xr (X+Accumulator)}
     end
     //Accumulator
  end


// Example Testing
  N = 0
  L = 5

  {Producer N L P} // [0 1 2 .. 100]
  skip Browse P
  Accumulator = {Consumer P 0}
  skip Browse Accumulator
  Out={OddFilter P F} // [0 2 4 .. 100]
  skip Browse F

end





/*

consumer sum output
*Hoz> runFull "declarative" "lab6/part2.txt" "lab6/part2.out"
P : [ 0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 ]

Accumulator : 4950

*/
