[local ["Producer","N","Limit","Out","OddFilter","P","L","F","T","Consumer","Xs","Ys","Accumulator","NotEqual"] [Producer = proc {$ N Limit Out} [local ["EXU1"] [local ["EXU2","EXU3"] [EXU2 = N,EXU3 = Limit,"LT" "EXU2" "EXU3" "EXU1"],if EXU1 then [local ["T","N1"] [local ["EXU1","EXU2"] [EXU1 = N,EXU2 = T,Out = '|'(1:EXU1 2:EXU2)],local ["EXU1","EXU2"] [EXU1 = N,EXU2 = 1,"IntPlus" "EXU1" "EXU2" "N1"],local ["EXU1","EXU2","EXU3"] [EXU1 = N1,EXU2 = Limit,EXU3 = T,"Producer" "EXU1" "EXU2" "EXU3"]]] else [Out = nil()]]],OddFilter = proc {$ P EXU1} [case P of nil() then [EXU1 = nil()] else [case P of '|'(1:X 2:Xr) then [local ["EXU2"] [local ["EXU3","EXU4"] [local ["EXU6","EXU7"] [EXU6 = X,EXU7 = 2,"Mod" "EXU6" "EXU7" "EXU3"],EXU4 = 0,"Eq" "EXU3" "EXU4" "EXU2"],if EXU2 then [local ["EXU3","EXU4"] [EXU3 = X,local ["EXU5"] [EXU5 = Xr,"OddFilter" "EXU5" "EXU4"],EXU1 = '|'(1:EXU3 2:EXU4)]] else [local ["EXU3"] [EXU3 = Xr,"OddFilter" "EXU3" "EXU1"]]]] else [skip]]],Consumer = proc {$ Xs Accumulator EXU1} [case Xs of nil() then [EXU1 = Accumulator] else [case Xs of '|'(1:X 2:Xr) then [local ["EXU2","EXU3"] [EXU2 = Xr,local ["EXU4","EXU5"] [EXU4 = X,EXU5 = Accumulator,"IntPlus" "EXU4" "EXU5" "EXU3"],"Consumer" "EXU2" "EXU3" "EXU1"]] else [skip]]],N = 0,L = 100,local ["EXU1","EXU2","EXU3"] [EXU1 = N,EXU2 = L,EXU3 = P,"Producer" "EXU1" "EXU2" "EXU3"],skip/BP,local ["EXU1","EXU2"] [EXU1 = P,EXU2 = 0,"Consumer" "EXU1" "EXU2" "Accumulator"],skip/BAccumulator,local ["EXU1"] [EXU1 = P,"OddFilter" "EXU1" "F"],skip/BF]]