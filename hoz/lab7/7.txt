local  N  X Y F Z Times Merge Display Xr  Yr G H V1 F1 V2 F3  GG Generate X1 X2 Y1 Y2 Xs Ys  Two Three Five Take HamingTake DisplayH in

  fun {Generate N}
    fun {$} (N#{Generate (N+1)}) end
  end

//a. Times function

  fun {Times N H}
   //skip Browse N
    fun {$}
      (X#G) = {H} in
      ((N*X)#{Times N G })
     end
  end

//a. Merge function

  fun {Merge Xs Ys}
      fun {$}
         (X1#X2) = {Xs}
         (Y1#Y2) = {Ys} in
           if(X1<Y1) then
              (X1#{Merge X2 Ys})
           elseif (X1>Y1) then
              (Y1#{Merge Xs Y2 })
           else (X1#{Merge X2 Y2})
         end
      end
  end

  GG = {Generate 1}
  Two = {Times 2 GG}  // 2, 4 ,6,...
  Three = {Times 3 GG}   // 3, 6, ...
  Five = {Times 5 GG}   // 5, 10, ...

//Generate Haming Squence
  Z = {Merge Two {Merge Three Five}}

  local
    (V5#F5) = {Z}
    (V6#F6) = {F5}
    (V7#F7) = {F6}
    (V8#F8) = {F7}
    (V9#F9) = {F8}
    (V10#F10) = {F9}
    (V11#F11) = {F10} in
    skip Browse V5
    skip Browse V6
    skip Browse V7
    skip Browse V8
    skip Browse V9
    skip Browse V10
    skip Browse V11
  end

//b generate hamming sequence and display

   proc {Display X N}
   fun {DisplayH Z Num}
   if (Num == 0) then nil
   else
   (V#F) = {Z} in
   (V|{DisplayH F (Num-1)})
   end
   end
   local L in
   L = {DisplayH X N}
   skip Browse L
   end
   end
  //Testing
  X = {Generate 3}
  Y = {Times 3 X}
  {Display Y 5}


//c. take function to print 10 hamming sequence

  fun {Take N F }
    fun {$}
      if (N==0) then nil
      else
        (X#G) = {F} in
        (X#{Take (N-1) G})
      end
    end
  end


  HamingTake = {Take 10 Z}
  local
    (V12#F12) = {HamingTake}
    (V13#F13) = {F12}
    (V14#F14) = {F13}
    (V15#F15) = {F14}
    (V16#F16) = {F15}
    (V17#F17) = {F16}
    (V18#F18) = {F17} in
    skip Browse V12
    skip Browse V13
    skip Browse V14
    skip Browse V15
    skip Browse V16
    skip Browse V17
    skip Browse V18
  end


end
